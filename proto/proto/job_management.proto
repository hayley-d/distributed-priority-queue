syntax = "proto3";

package job_management;


// Job structure
message Job {
  string job_id = 1;  
  int32 priority = 2;
  bytes payload = 3;
}

// Enqueue Request (job not created yet)
message EnqueueRequest {
    int32 priority = 1;
    bytes payload = 2;
}

// Request for getting a task
message JobRequest {
  string job_id = 1;
}

// Response containing task data
message JobResponse {
  Job job = 1;
}

// Paxos Prepare message sent from proposer to acceptor
message PaxosPrepare {
  int32 proposal_number = 1;
}

// Paxos Promise message sent from the acceptor to the proposer
message PaxosPromise {
  int32 proposal_number = 1;
  int32 highest_proposal = 2; 
  bool promise = 3;
}

// Sent from the leader to the follower
message PaxosAccept {
  int32 proposal_number = 1;
  Job proposed_job = 2;
}

// Sent from the follower to the leader to acknowledge the accept message
message PaxosAck {
  int32 proposal_number = 1;
}

// Message to represent a request to get a job (long-polling)
message PollJobRequest {
    int32 consumer_id = 1;
    int32 timeout_seconds = 2;
}

// Mesage representing a response from the long-polling request
message PollJobResponse {
    bool success = 1; // if the job was successfully fetched
    Job job = 2; // The job assigned to the consumer
}

message NodeHealthRequest {}

message NodeHealthResponse {
    float cpu_utilization = 1;
    float memory_usage = 2;
    int32 queue_depth = 3;
    float response_time = 4;
}

// Service definition for Job management and Paxos protocol
service JobService {
  rpc EnqueueJob (EnqueueRequest) returns (Job);
  rpc GetTask (JobRequest) returns (JobResponse);
}

service LongPollingService {
    rpc Poll (PollJobRequest) returns (PollJobResponse);
}

service PaxosService {
  rpc Prepare (PaxosPrepare) returns (PaxosPromise);
  rpc Propose (PaxosAccept) returns (PaxosAck);
}

service NodeHealthService {
    rpc GetNodeHealth (NodeHealthRequest) returns (NodeHealthResponse);
}
